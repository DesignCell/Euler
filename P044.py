# Problem 044
# Pentagon Numbers

# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
# The first ten pentagonal numbers are:
#   1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However,
# their difference, 70 − 22 = 48, is not pentagonal.

# Find the pair of pentagonal numbers, Pj and Pk, for which their
# sum and difference are pentagonal and D = |Pk − Pj| is minimised;
# what is the value of D?

from time import time
stime = time()
#import Functions # pylint: disable=import-error

pent_set = set()
def pent_num_check(value):
    pent_num = (1 + (1 + 24 * value)**.5 ) / 6
    if pent_num.is_integer() == True: 
        pent_set.add(pent_num)
        return True
    return

def d_check(d_sum,d_dif):
    if d_sum not in pent_set and d_dif not in pent_set:
        if pent_num_check(d_sum) != True:   return
        if pent_num_check(d_dif) != True:   return
    return True

def pent_num(value):
    return int(value * (3*value -1) / 2)

def search():
    cnt = 0
    d = 0 # Start high
    pent_list = []
    while True:
        cnt +=1
        pent_list.append(pent_num(cnt))
        if cnt == 1: continue
        for lcnt in range(cnt,0,-1):
            d_sum = pent_list[cnt-1] + pent_list[lcnt-1]
            d_dif = pent_list[cnt-1] - pent_list[lcnt-1]
            if d_dif > d and d != 0: break
            if d_check(d_sum,d_dif) == True:
                print(pent_list[cnt-1],pent_list[lcnt-1])
                if d > d_dif or d == 0:   
                    d = d_dif
                    break
        if pent_list[-1] - pent_list[-2] > d and d != 0: return d


print(search())

print('Solve Time: ', round(((time() - stime) * 1000), 2), 'ms')

# Solution	: 5482660
# Solve time: 26854.9ms 09-21-18
